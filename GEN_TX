// Code your testbench here
// or browse Examples
class apb_tx;
  //properties of class
  rand bit wr_rd;
  rand bit [7:0]addr;
  rand bit [31:0]data;
  rand bit [3:0]sel;
  //methods
  function void print(string thub);
    $display("[%0s] wr_rd=%0b,addr=%0h,data=%0h,sel=%0d",thub,wr_rd,addr,data,sel);
  endfunction
  //consitrants:Compulsory rule need to follow
  constraint sel_c{
    sel inside{4'b0010,4'b0100,4'b1000,4'b1001,4'b0000};
  }
endclass 

class apb_gen;
  mailbox mbox;
  apb_tx tx;
  task run();
    repeat(5)begin
      tx=new();
      assert(tx.randomize());
      tx.print("abp_gen");
      mbox.put(tx);
    end
  endtask
endclass

class apb_bfm;
  mailbox mbox;
  apb_tx tx;
  task run();
    repeat (5)begin
      tx=new();
      mbox.get(tx);
      tx.print("apb_bfm");
    end
  endtask
endclass
  
  
module tb;
  apb_gen gen;
  apb_bfm bfm;
  mailbox mbox;
  initial begin
    mbox=new();
    gen=new();
    bfm=new();
    
    gen.mbox=mbox;
    bfm.mbox=mbox;
    
    fork
      gen.run();
      bfm.run();
    join
  end
endmodule


OUTPUT:

[abp_gen] wr_rd=1,addr=b3,data=3973cf36,sel=4
[abp_gen] wr_rd=0,addr=bb,data=7ea89df6,sel=4
[abp_gen] wr_rd=1,addr=cd,data=b31b9d2b,sel=9
[abp_gen] wr_rd=0,addr=ba,data=340813ee,sel=2
[abp_gen] wr_rd=0,addr=d4,data=f8c5d01f,sel=2
[apb_bfm] wr_rd=1,addr=b3,data=3973cf36,sel=4
[apb_bfm] wr_rd=0,addr=bb,data=7ea89df6,sel=4
[apb_bfm] wr_rd=1,addr=cd,data=b31b9d2b,sel=9
[apb_bfm] wr_rd=0,addr=ba,data=340813ee,sel=2
[apb_bfm] wr_rd=0,addr=d4,data=f8c5d01f,sel=2
