//Design Code
module add(a,b,c);
  input [2:0]a,b;
  output [3:0]c;
  assign c=a+b;
endmodule

interface inter;
  logic [2:0]a;
  logic [2:0]b;
  logic [3:0]c;
endinterface
// Code your testbench here
// or browse Examples
class generator;
  int a=1;
  int b=5;
  mailbox mbx;
  task run();
    mbx.put({a[2:0],b[2:0]});
    $display("Generator test cases a=%0d, b=%0d",a,b);
  endtask
endclass

class driver;
  mailbox mbx;
  virtual inter vif;
  task run();
    logic [5:0]temp;
    logic [2:0]a,b;
    mbx.get(temp);
    a=temp[5:3];
    b=temp[2:0];
    vif.a=a;
    vif.b=b;
    #10;
    $display("Driver applied: a=%0d,b=%0d and dut output c=%0d ",a,b,vif.c);
  endtask
endclass
//Testbench code:
module tb;
  inter aif();
  add dut(.a(aif.a),.b(aif.b),.c(aif.c));
  generator gen;
  driver div;
  mailbox mbx;
  initial begin
    gen=new();
    div=new();
    mbx=new();
    
    gen.mbx=mbx;
    div.mbx=mbx;
    div.vif=aif;
    fork
      gen.run();
      div.run();
    join
  end
endmodule

output:
Generator test cases a=1, b=5
Driver applied: a=1,b=5 and dut output c=6
